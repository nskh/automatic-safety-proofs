(|active_corner_certificate|
 (|left_open_connected| 0
  (|left_open_connected-1| NIL 3966366726
   (""
    (THEN (SKEEP) (EXPAND "connected?") (SKEEP) (TYPEPRED "x" "y")
     (EXPAND "left_open") (ASSERT))
    NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|left_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   SHOSTAK))
 (|left_open_noe| 0
  (|left_open_noe-1| NIL 3966366726
   ("" (SKEEP)
    (("" (EXPAND "not_one_element?")
      (("" (SKEEP)
        (("" (INST 1 "x-1")
          (("1" (ASSERT) NIL NIL)
           ("2" (TYPEPRED "x")
            (("2" (EXPAND "left_open") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|left_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   SHOSTAK))
 (|left_open_dd| 0
  (|left_open_dd-1| NIL 3966366726
   (""
    (THEN (SKEEP) (LEMMA "connected_deriv_domain[(left_open(c))]") (ASSERT)
     (HIDE 2) (LEMMA " left_open_connected") (LEMMA " left_open_noe") (INST?)
     (INST?) (ASSERT))
    NIL NIL)
   ((|left_open_connected| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|left_open_noe| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|connected_deriv_domain| FORMULA-DECL NIL |deriv_domain_def| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|left_open| CONST-DECL "bool" |active_corner_certificate| NIL))
   SHOSTAK))
 (|right_open_connected| 0
  (|right_open_connected-1| NIL 3966366726
   (""
    (THEN (SKEEP) (EXPAND "connected?") (SKEEP) (TYPEPRED "x" "y")
     (EXPAND "right_open") (ASSERT))
    NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|right_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   SHOSTAK))
 (|right_open_noe| 0
  (|right_open_noe-1| NIL 3966366726
   ("" (SKEEP)
    (("" (EXPAND "not_one_element?")
      (("" (SKEEP)
        (("" (INST 1 "x+1")
          (("1" (ASSERT) NIL NIL)
           ("2" (TYPEPRED "x")
            (("2" (ASSERT)
              (("2" (EXPAND "right_open") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|right_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   SHOSTAK))
 (|right_open_dd| 0
  (|right_open_dd-1| NIL 3966366726
   (""
    (THEN (SKEEP) (LEMMA "connected_deriv_domain[(right_open(c))]") (ASSERT)
     (HIDE 2) (LEMMA " right_open_connected") (LEMMA " right_open_noe") (INST?)
     (INST?) (ASSERT))
    NIL NIL)
   ((|right_open_connected| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|right_open_noe| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|connected_deriv_domain| FORMULA-DECL NIL |deriv_domain_def| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|right_open| CONST-DECL "bool" |active_corner_certificate| NIL))
   SHOSTAK))
 (|ci_noe| 0
  (|ci_noe-1| NIL 3966366726
   ("" (SKEEP)
    (("" (EXPAND "not_one_element?")
      (("" (SKEEP)
        (("" (TYPEPRED "x")
          (("" (INST-CP 2 "d1")
            (("1" (INST 2 "d2")
              (("1" (ASSERT) NIL NIL)
               ("2" (EXPAND "ci") (("2" (ASSERT) NIL NIL)) NIL))
              NIL)
             ("2" (EXPAND "ci")
              (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ci| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   SHOSTAK))
 (|ci_connected| 0
  (|ci_connected-1| NIL 3966366726
   (""
    (THEN (SKEEP) (EXPAND "connected?" 2) (SKEEP) (TYPEPRED "x" "y" "z")
     (EXPAND "ci") (ASSERT) (FLATTEN) (ASSERT))
    NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ci| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   SHOSTAK))
 (|ci_dd| 0
  (|ci_dd-1| NIL 3966366726
   (""
    (THEN (SKEEP) (LEMMA "connected_deriv_domain[(ci(d1,d2))]") (ASSERT)
     (HIDE 2) (LEMMA " ci_connected") (LEMMA " ci_noe") (TYPEPRED "d1" "d2")
     (REVEAL +) (INST -3 "d1" "d2") (INST -4 "d1" "d2") (ASSERT))
    NIL NIL)
   ((|ci_connected| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ci_noe| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|connected_deriv_domain| FORMULA-DECL NIL |deriv_domain_def| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|ci| CONST-DECL "bool" |active_corner_certificate| NIL))
   SHOSTAK))
 (|mvt_gen_ge_TCC1| 0
  (|mvt_gen_ge_TCC1-1| NIL 3966366717
   ("" (THEN (SKEEP) (LEMMA "connected_deriv_domain[(D)]") (ASSERT)) NIL NIL)
   ((|connected_deriv_domain| FORMULA-DECL NIL |deriv_domain_def| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   NIL
   (|mvt_gen_ge| ASSUMING
    "analysis@derivatives[(active_corner_certificate.D)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (94 3 94 18))))
 (|mvt_gen_ge_TCC2| 0
  (|mvt_gen_ge_TCC2-1| NIL 3966366717 ("" (THEN (ASSERT) (GRIND)) NIL NIL) NIL
   NIL
   (|mvt_gen_ge| ASSUMING
    "analysis@derivatives[(active_corner_certificate.D)].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (94 3 94 18))))
 (|mvt_gen_ge| 0
  (|mvt_gen_ge-1| NIL 3966366726
   ("" (SKEEP)
    (("" (CASE "a=b")
      (("1" (ASSERT) NIL NIL)
       ("2" (LEMMA "mean_value[(D)]")
        (("2" (INST -1 "b" "a" "f")
          (("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (INST -6 "c!1")
                (("2" (EXPAND "deriv" -6)
                  (("2" (ASSERT)
                    (("2" (MULT-BY -6 "a-b")
                      (("2" (ASSERT)
                        (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   SHOSTAK))
 (|mvt_gen_le| 0
  (|mvt_gen_le-1| NIL 3966366726
   ("" (SKEEP)
    (("" (CASE "a=b")
      (("1" (ASSERT) NIL NIL)
       ("2" (LEMMA "mean_value[(D)]")
        (("2" (INST -1 "b" "a" "f")
          (("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (INST -6 "c!1")
                (("2" (EXPAND "deriv" -6)
                  (("2" (ASSERT)
                    (("2" (MULT-BY -6 "a-b")
                      (("2" (ASSERT)
                        (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   SHOSTAK))
 (|mvt_gen_ge_lo_TCC1| 0
  (|mvt_gen_ge_lo_TCC1-1| NIL 3966366717
   ("" (THEN (SKEEP) (LEMMA "left_open_dd") (INST -1 "C") (ASSERT) (GRIND)) NIL
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|left_open_dd| FORMULA-DECL NIL |active_corner_certificate| NIL))
   NIL
   (|mvt_gen_ge_lo| ASSUMING
    "analysis@derivatives[(active_corner_certificate.left_open(active_corner_certificate.C))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (127 3 127 29))))
 (|mvt_gen_ge_lo_TCC2| 0
  (|mvt_gen_ge_lo_TCC2-1| NIL 3966366717
   ("" (THEN (SKEEP) (LEMMA "left_open_noe") (INST -1 "C") (ASSERT) (GRIND))
    NIL NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|left_open_noe| FORMULA-DECL NIL |active_corner_certificate| NIL))
   NIL
   (|mvt_gen_ge_lo| ASSUMING
    "analysis@derivatives[(active_corner_certificate.left_open(active_corner_certificate.C))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (127 3 127 29))))
 (|mvt_gen_ge_lo| 0
  (|mvt_gen_ge_lo-1| NIL 3966366726
   ("" (LEMMA "mvt_gen_ge")
    (("" (SKEEP)
      (("" (INST -1 "f" "left_open(C)" "c" "a" "b")
        (("1" (ASSERT) NIL NIL)
         ("2" (LEMMA "left_open_noe")
          (("2" (LEMMA " left_open_connected")
            (("2" (INST -1 "C")
              (("2" (INST -2 "C") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mvt_gen_ge| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|left_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|left_open_connected| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|left_open_noe| FORMULA-DECL NIL |active_corner_certificate| NIL))
   SHOSTAK))
 (|mvt_gen_le_lo| 0
  (|mvt_gen_le_lo-1| NIL 3966366726
   ("" (LEMMA "mvt_gen_le")
    (("" (SKEEP)
      (("" (INST -1 "f" "left_open(C)" "c" "a" "b")
        (("1" (ASSERT) NIL NIL)
         ("2" (LEMMA "left_open_noe")
          (("2" (LEMMA " left_open_connected")
            (("2" (INST -1 "C")
              (("2" (INST -2 "C") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mvt_gen_le| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|left_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|left_open_connected| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|left_open_noe| FORMULA-DECL NIL |active_corner_certificate| NIL))
   SHOSTAK))
 (|mvt_gen_ge_ro_TCC1| 0
  (|mvt_gen_ge_ro_TCC1-1| NIL 3966366717
   ("" (THEN (SKEEP) (LEMMA "right_open_dd") (INST -1 "C") (ASSERT) (GRIND))
    NIL NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|right_open_dd| FORMULA-DECL NIL |active_corner_certificate| NIL))
   NIL
   (|mvt_gen_ge_ro| ASSUMING
    "analysis@derivatives[(active_corner_certificate.right_open(active_corner_certificate.C))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (158 3 158 30))))
 (|mvt_gen_ge_ro_TCC2| 0
  (|mvt_gen_ge_ro_TCC2-1| NIL 3966366717
   ("" (THEN (SKEEP) (LEMMA "right_open_noe") (INST -1 "C") (ASSERT) (GRIND))
    NIL NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|right_open_noe| FORMULA-DECL NIL |active_corner_certificate| NIL))
   NIL
   (|mvt_gen_ge_ro| ASSUMING
    "analysis@derivatives[(active_corner_certificate.right_open(active_corner_certificate.C))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (158 3 158 30))))
 (|mvt_gen_ge_ro| 0
  (|mvt_gen_ge_ro-1| NIL 3966366726
   ("" (LEMMA "mvt_gen_ge")
    (("" (SKEEP)
      (("" (INST -1 "f" "right_open(C)" "c" "a" "b")
        (("1" (ASSERT) NIL NIL)
         ("2" (LEMMA "right_open_noe")
          (("2" (LEMMA "right_open_connected")
            (("2" (INST -1 "C")
              (("2" (INST -2 "C") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mvt_gen_ge| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|right_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|right_open_connected| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|right_open_noe| FORMULA-DECL NIL |active_corner_certificate| NIL))
   SHOSTAK))
 (|mvt_gen_le_ro| 0
  (|mvt_gen_le_ro-1| NIL 3966366726
   ("" (LEMMA "mvt_gen_le")
    (("" (SKEEP)
      (("" (INST -1 "f" "right_open(C)" "c" "a" "b")
        (("1" (ASSERT) NIL NIL)
         ("2" (LEMMA "right_open_noe")
          (("2" (LEMMA "right_open_connected")
            (("2" (INST -1 "C")
              (("2" (INST -2 "C") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mvt_gen_le| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|right_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|right_open_connected| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|right_open_noe| FORMULA-DECL NIL |active_corner_certificate| NIL))
   SHOSTAK))
 (|mvt_gen_ge_ci_TCC1| 0
  (|mvt_gen_ge_ci_TCC1-1| NIL 3966366717
   ("" (THEN (SKEEP) (LEMMA "ci_dd") (INST -1 "d1" "d2") (ASSERT) (GRIND)) NIL
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|ci_dd| FORMULA-DECL NIL |active_corner_certificate| NIL))
   NIL
   (|mvt_gen_ge_ci| ASSUMING
    "analysis@derivatives[(active_corner_certificate.ci(active_corner_certificate.d1, active_corner_certificate.d2))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (188 15 188 38))))
 (|mvt_gen_ge_ci_TCC2| 0
  (|mvt_gen_ge_ci_TCC2-1| NIL 3966366717
   ("" (THEN (SKEEP) (LEMMA "ci_noe") (INST -1 "d1" "d2") (ASSERT) (GRIND)) NIL
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|ci_noe| FORMULA-DECL NIL |active_corner_certificate| NIL))
   NIL
   (|mvt_gen_ge_ci| ASSUMING
    "analysis@derivatives[(active_corner_certificate.ci(active_corner_certificate.d1, active_corner_certificate.d2))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (188 15 188 38))))
 (|mvt_gen_ge_ci| 0
  (|mvt_gen_ge_ci-1| NIL 3966366726
   ("" (LEMMA "mvt_gen_ge")
    (("" (SKEEP)
      (("" (INST -1 "f" "ci(d1,d2)" "c" "a" "b")
        (("1" (ASSERT) NIL NIL)
         ("2" (LEMMA "ci_noe")
          (("2" (LEMMA " ci_connected")
            (("2" (INST -1 "d1" "d2")
              (("2" (INST -2 "d1" "d2") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mvt_gen_ge| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|ci| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|ci_connected| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|ci_noe| FORMULA-DECL NIL |active_corner_certificate| NIL))
   SHOSTAK))
 (|mvt_gen_le_ci| 0
  (|mvt_gen_le_ci-1| NIL 3966366726
   ("" (LEMMA "mvt_gen_le")
    (("" (SKEEP)
      (("" (INST -1 "f" "ci(d1,d2)" "c" "a" "b")
        (("1" (ASSERT) NIL NIL)
         ("2" (LEMMA "ci_noe")
          (("2" (LEMMA " ci_connected")
            (("2" (INST -1 "d1" "d2")
              (("2" (INST -2 "d1" "d2") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mvt_gen_le| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|ci| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|ci_connected| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|ci_noe| FORMULA-DECL NIL |active_corner_certificate| NIL))
   SHOSTAK))
 (|le_lo_case_0_TCC1| 0
  (|le_lo_case_0_TCC1-1| NIL 3966366717 ("" (THEN (ASSERT) (GRIND)) NIL NIL)
   NIL NIL
   (|le_lo_case_0| ASSUMING
    "analysis@derivatives[(active_corner_certificate.left_open(0))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (221 4 221 30))))
 (|le_lo_case_0_TCC2| 0
  (|le_lo_case_0_TCC2-1| NIL 3966366717 ("" (THEN (ASSERT) (GRIND)) NIL NIL)
   NIL NIL
   (|le_lo_case_0| ASSUMING
    "analysis@derivatives[(active_corner_certificate.left_open(0))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (221 4 221 30))))
 (|le_lo_case_0| 0
  (|le_lo_case_0-1| NIL 3966366726
   ("" (SKEEP*)
    (("" (SKOLETIN*)
      (("" (FLATTEN)
        (("" (SKEEP)
          (("" (CASE "xo + 2 <= 0")
            (("1" (LEMMA "mvt_gen_le_lo")
              (("1" (INST -1 "f" "0" "0" "xo + 2" "x")
                (("1" (SPLIT -1)
                  (("1" (ASSERT)
                    (("1" (LEMMA "mvt_gen_le_lo")
                      (("1" (INST -1 "f" "0" "0" "x" "xo - 2")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (EXPAND "left_open") (("2" (ASSERT) NIL NIL))
                          NIL)
                         ("3" (EXPAND "left_open") (("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)
                   ("4" (PROPAX) NIL NIL))
                  NIL)
                 ("2" (EXPAND "left_open") (("2" (ASSERT) NIL NIL)) NIL)
                 ("3" (EXPAND "left_open") (("3" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (LEMMA "mvt_gen_le_lo")
              (("2" (INST -1 "f" "0" "0" "0" "x")
                (("1" (SPLIT -1)
                  (("1" (ASSERT)
                    (("1" (LEMMA "mvt_gen_le_lo")
                      (("1" (INST -1 "f" "0" "0" "x" "xo - 2")
                        (("1" (EXPAND "f")
                          (("1" (SPLIT -1)
                            (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "f")
                          (("2" (EXPAND "left_open") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL)
                         ("3" (EXPAND "f")
                          (("3" (EXPAND "left_open") (("3" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)
                   ("4" (PROPAX) NIL NIL))
                  NIL)
                 ("2" (EXPAND "f")
                  (("2" (EXPAND "left_open") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("3" (EXPAND "f")
                  (("3" (EXPAND "left_open") (("3" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mvt_gen_le_lo| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|left_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|ge_ci_case_1_TCC1| 0
  (|ge_ci_case_1_TCC1-1| NIL 3966366717 ("" (THEN (ASSERT) (GRIND)) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|ge_ci_case_1| DISJOINTNESS
    "COND reals.<(active_corner_certificate.x, 0) -> active_corner_certificate.g(0), booleans.AND(reals.>=(active_corner_certificate.x, 0), reals.<=(active_corner_certificate.x, 4)) -> active_corner_certificate.g(active_corner_certificate.x), ELSE -> active_corner_certificate.g(4) ENDCOND"
    "NIL" (273 8 277 15))))
 (|ge_ci_case_1_TCC2| 0
  (|ge_ci_case_1_TCC2-1| NIL 3966366717 ("" (THEN (ASSERT) (GRIND)) NIL NIL)
   NIL NIL
   (|ge_ci_case_1| ASSUMING
    "analysis@derivatives[(active_corner_certificate.ci(0, 4))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (279 4 279 26))))
 (|ge_ci_case_1_TCC3| 0
  (|ge_ci_case_1_TCC3-1| NIL 3966366717
   ("" (THEN (SKEEP) (LEMMA "ci_dd") (INST -1 "0" "4") (ASSERT) (GRIND)) NIL
    NIL)
   NIL NIL
   (|ge_ci_case_1| ASSUMING
    "analysis@derivatives[(active_corner_certificate.ci(0, 4))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (279 4 279 26))))
 (|ge_ci_case_1| 0
  (|ge_ci_case_1-1| NIL 3966366726
   ("" (SKEEP*)
    (("" (SKOLETIN*)
      (("" (FLATTEN)
        (("" (SKEEP)
          (("" (CASE "xo - 2 >= 0 AND xo + 2 <= 4")
            (("1" (FLATTEN)
              (("1" (LEMMA "mvt_gen_ge_ci")
                (("1" (INST -1 "f" "0" "4" "0" "xo + 2" "x")
                  (("1" (SPLIT -1)
                    (("1" (ASSERT)
                      (("1" (LEMMA "mvt_gen_ge_ci")
                        (("1" (INST -1 "f" "0" "4" "0" "x" "xo - 2")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (EXPAND "ci") (("2" (PROPAX) NIL NIL)) NIL)
                           ("3" (ASSERT)
                            (("3" (EXPAND "ci") (("3" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL)
                     ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL))
                    NIL)
                   ("2" (EXPAND "ci") (("2" (ASSERT) NIL NIL)) NIL)
                   ("3" (EXPAND "ci") (("3" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "xo - 2 < 0 AND xo + 2 <= 4")
              (("1" (FLATTEN)
                (("1" (LEMMA "mvt_gen_ge_ci")
                  (("1" (INST -1 "f" "0" "4" "0" "xo + 2" "x")
                    (("1" (SPLIT -1)
                      (("1" (ASSERT)
                        (("1" (LEMMA "mvt_gen_ge_ci")
                          (("1" (INST -1 "f" "0" "4" "0" "x" "0")
                            (("1" (EXPAND "f") (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (EXPAND "ci") (("2" (PROPAX) NIL NIL)) NIL)
                             ("3" (ASSERT)
                              (("3" (EXPAND "ci") (("3" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL)
                       ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL))
                      NIL)
                     ("2" (EXPAND "ci") (("2" (ASSERT) NIL NIL)) NIL)
                     ("3" (EXPAND "ci") (("3" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (CASE "xo - 2 >= 0 AND xo + 2 > 4")
                  (("1" (FLATTEN)
                    (("1" (LEMMA "mvt_gen_ge_ci")
                      (("1" (INST -1 "f" "0" "4" "0" "4" "x")
                        (("1" (SPLIT -1)
                          (("1" (LEMMA "mvt_gen_ge_ci")
                            (("1" (INST -1 "f" "0" "4" "0" "x" "xo - 2")
                              (("1" (SPLIT -1)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "f") (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL)
                                 ("4" (ASSERT) NIL NIL) ("5" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (EXPAND "ci") (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (EXPAND "ci") (("3" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL)
                           ("4" (ASSERT) NIL NIL) ("5" (PROPAX) NIL NIL))
                          NIL)
                         ("2" (EXPAND "ci") (("2" (PROPAX) NIL NIL)) NIL)
                         ("3" (ASSERT)
                          (("3" (EXPAND "ci") (("3" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (CASE "xo - 2 < 0 AND xo + 2 > 4")
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mvt_gen_ge_ci| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|ci| CONST-DECL "bool" |active_corner_certificate| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|ge_ro_case_2_TCC1| 0
  (|ge_ro_case_2_TCC1-1| NIL 3966366717 ("" (THEN (ASSERT) (GRIND)) NIL NIL)
   NIL NIL
   (|ge_ro_case_2| ASSUMING
    "analysis@derivatives[(active_corner_certificate.right_open(4))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (355 4 355 31))))
 (|ge_ro_case_2_TCC2| 0
  (|ge_ro_case_2_TCC2-1| NIL 3966366717 ("" (THEN (ASSERT) (GRIND)) NIL NIL)
   NIL NIL
   (|ge_ro_case_2| ASSUMING
    "analysis@derivatives[(active_corner_certificate.right_open(4))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (355 4 355 31))))
 (|ge_ro_case_2| 0
  (|ge_ro_case_2-1| NIL 3966366726
   ("" (SKEEP*)
    (("" (SKOLETIN*)
      (("" (FLATTEN)
        (("" (SKEEP)
          (("" (CASE "xo - 2 >= 4")
            (("1" (LEMMA "mvt_gen_ge_ro")
              (("1" (INST -1 "f" "4" "8" "xo + 2" "x")
                (("1" (SPLIT -1)
                  (("1" (ASSERT)
                    (("1" (LEMMA "mvt_gen_ge_ro")
                      (("1" (INST -1 "f" "4" "8" "x" "xo - 2")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (EXPAND "right_open") (("2" (ASSERT) NIL NIL))
                          NIL)
                         ("3" (EXPAND "right_open") (("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)
                   ("4" (PROPAX) NIL NIL))
                  NIL)
                 ("2" (EXPAND "right_open") (("2" (ASSERT) NIL NIL)) NIL)
                 ("3" (EXPAND "right_open") (("3" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (LEMMA "mvt_gen_ge_ro")
              (("2" (INST -1 "f" "4" "8" "xo + 2" "x")
                (("1" (SPLIT -1)
                  (("1" (ASSERT)
                    (("1" (LEMMA "mvt_gen_ge_ro")
                      (("1" (INST -1 "f" "4" "8" "x" "4")
                        (("1" (EXPAND "f")
                          (("1" (SPLIT -1)
                            (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "f")
                          (("2" (EXPAND "right_open") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL)
                         ("3" (EXPAND "f")
                          (("3" (EXPAND "right_open") (("3" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)
                   ("4" (PROPAX) NIL NIL))
                  NIL)
                 ("2" (EXPAND "f")
                  (("2" (EXPAND "right_open") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("3" (EXPAND "f")
                  (("3" (EXPAND "right_open") (("3" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mvt_gen_ge_ro| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|right_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|full_domain_soundness_lemma_TCC1| 0
  (|full_domain_soundness_lemma_TCC1-1| NIL 3966368865
   ("" (ASSUMING-TCC) NIL NIL) NIL NIL
   (|full_domain_soundness_lemma| ASSUMING
    "analysis@derivatives[(active_corner_certificate.left_open(0))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (410 4 410 30))))
 (|full_domain_soundness_lemma_TCC2| 0
  (|full_domain_soundness_lemma_TCC2-1| NIL 3966368865
   ("" (ASSUMING-TCC) NIL NIL) NIL NIL
   (|full_domain_soundness_lemma| ASSUMING
    "analysis@derivatives[(active_corner_certificate.left_open(0))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (410 4 410 30))))
 (|full_domain_soundness_lemma_TCC3| 0
  (|full_domain_soundness_lemma_TCC1-1| NIL 3966366717
   ("" (THEN (ASSERT) (GRIND)) NIL NIL) NIL NIL
   (|full_domain_soundness_lemma| ASSUMING
    "analysis@derivatives[(active_corner_certificate.ci(0, 4))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (412 4 412 26))))
 (|full_domain_soundness_lemma_TCC4| 0
  (|full_domain_soundness_lemma_TCC2-1| NIL 3966366717
   ("" (THEN (ASSERT) (GRIND)) NIL NIL) NIL NIL
   (|full_domain_soundness_lemma| ASSUMING
    "analysis@derivatives[(active_corner_certificate.ci(0, 4))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (412 4 412 26))))
 (|full_domain_soundness_lemma_TCC5| 0
  (|full_domain_soundness_lemma_TCC3-1| NIL 3966366717
   ("" (THEN (ASSERT) (GRIND)) NIL NIL) NIL NIL
   (|full_domain_soundness_lemma| ASSUMING
    "analysis@derivatives[(active_corner_certificate.right_open(4))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"
    (415 4 415 31))))
 (|full_domain_soundness_lemma_TCC6| 0
  (|full_domain_soundness_lemma_TCC4-1| NIL 3966366717
   ("" (THEN (ASSERT) (GRIND)) NIL NIL) NIL NIL
   (|full_domain_soundness_lemma| ASSUMING
    "analysis@derivatives[(active_corner_certificate.right_open(4))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"
    (415 4 415 31))))
 (|full_domain_soundness_lemma| 0
  (|full_domain_soundness_lemma-1| NIL 3966366726
   ("" (SKEEP)
    (("" (SKOLETIN*)
      (("" (FLATTEN)
        (("" (CASE "x <= 0")
          (("1" (LEMMA "le_lo_case_0")
            (("1" (INST -1 "xo" "yo" "g")
              (("1" (ASSERT)
                (("1" (EXPAND "f0")
                  (("1" (ASSERT)
                    (("1"
                      (CASE
                          "restrict[real, (left_open(0)), real](g) = (restrict[real, (left_open(0)), real] (LAMBDA(x:real): COND x <= 0 -> g(x), ELSE -> g(0) ENDCOND))")
                      (("1" (SPLIT -2)
                        (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                         ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                         ("5" (PROPAX) NIL NIL) ("6" (ASSERT) NIL NIL)
                         ("7" (ASSERT) NIL NIL)
                         ("8" (INST 1 "x") (("8" (ASSERT) NIL NIL)) NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY 1)
                        (("2" (HIDE-ALL-BUT 1)
                          (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "x <= 4")
            (("1" (LEMMA "ge_ci_case_1")
              (("1" (INST -1 "xo" "yo" "g")
                (("1" (ASSERT)
                  (("1" (EXPAND "f1")
                    (("1"
                      (CASE
                          "restrict[real, (ci(0, 4)), real](g) = (restrict[real, (ci(0, 4)), real](LAMBDA(x:real): COND x < 0 -> g(0), x >= 0 AND x <= 4 -> g(x), ELSE -> g(4) ENDCOND))")
                      (("1" (SPLIT -2)
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                         ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)
                         ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL)
                         ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)
                         ("9" (ASSERT) NIL NIL)
                         ("10" (INST 1 "x") (("10" (ASSERT) NIL NIL)) NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (DECOMPOSE-EQUALITY 1)
                          (("2" (HIDE-ALL-BUT 1)
                            (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (ASSERT)
                        (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "ge_ro_case_2")
              (("2" (INST -1 "xo" "yo" "g")
                (("2" (ASSERT)
                  (("2" (EXPAND "f2")
                    (("2"
                      (CASE
                          "restrict[real, (right_open(4)), real](g) = (restrict[real, (right_open(4)), real](LAMBDA(x:real): COND x < 4 -> g(4), ELSE -> g(x) ENDCOND))")
                      (("1" (SPLIT -2)
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                         ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)
                         ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL)
                         ("7" (ASSERT) NIL NIL)
                         ("8" (ASSERT)
                          (("8" (INST 1 "x") (("8" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (DECOMPOSE-EQUALITY 1)
                          (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ge_ci_case_1| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|ge_ro_case_2| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|le_lo_case_0| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|right_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|ci| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|left_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|full_domain_soundness_lemma_fun_TCC1| 0
  (|full_domain_soundness_lemma_fun_TCC1-1| NIL 3966366939
   ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|full_domain_soundness_lemma_fun| SUBTYPE "2"
    "{i: integers.int | booleans.OR(active_corner_certificate.x /= 0, reals.>=(i, 0))}"
    (468 23 468 24))))
 (|full_domain_soundness_lemma_fun| 0
  (|full_domain_soundness_lemma_fun-1| NIL 3966367057
   ("" (SKEEP)
    (("" (SKOLETIN 1)
      (("" (FLATTEN)
        (("" (LEMMA "full_domain_soundness_lemma")
          (("" (INST -1 "x" "xo" "yo" "g_1")
            (("" (SPLIT -1)
              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
               ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
               ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)
               ("7" (PROPAX) NIL NIL) ("8" (PROPAX) NIL NIL)
               ("9" (PROPAX) NIL NIL) ("10" (PROPAX) NIL NIL)
               ("11" (PROPAX) NIL NIL) ("12" (PROPAX) NIL NIL)
               ("13" (PROPAX) NIL NIL) ("14" (PROPAX) NIL NIL)
               ("15" (PROPAX) NIL NIL) ("16" (PROPAX) NIL NIL)
               ("17" (HIDE-ALL-BUT (-7 1))
                (("17" (REPLACE -1)
                  (("17" (EXPAND "restrict" 1)
                    (("17" (WITH-TCCS (DERIVABLE 1))
                      (("17" (LEMMA "left_open_dd")
                        (("17" (INST -1 "0") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("18" (HIDE-ALL-BUT (-7 1))
                (("18" (REPLACE -1)
                  (("18" (EXPAND "restrict" 1)
                    (("18" (SKEEP)
                      (("18" (DERIV)
                        (("1" (TYPEPRED "x!1")
                          (("1" (EXPAND "left_open" -1)
                            (("1" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("2" (LEMMA "left_open_dd")
                          (("2" (INST -1 "0") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("19" (HIDE-ALL-BUT (-7 1))
                (("19" (REPLACE -1)
                  (("19" (HIDE -1)
                    (("19" (EXPAND "restrict") (("19" (DERIVABLE) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("20" (HIDE-ALL-BUT (-7 1))
                (("20" (REPLACE -1)
                  (("20" (EXPAND "restrict")
                    (("20" (HIDE -1)
                      (("20" (SKEEP)
                        (("20" (DERIV)
                          (("20" (TYPEPRED "x!1")
                            (("20" (EXPAND "ci" -1) (("20" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("21" (HIDE-ALL-BUT (-7 1))
                (("21" (SKEEP)
                  (("21" (REPLACE -1)
                    (("21" (EXPAND "restrict" 1)
                      (("21" (DERIV)
                        (("21" (TYPEPRED "x!1")
                          (("21" (EXPAND "ci" -1) (("21" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("22" (HIDE-ALL-BUT (-7 1))
                (("22" (REPLACE -1 1)
                  (("22" (EXPAND "restrict") (("22" (DERIVABLE) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("23" (HIDE-ALL-BUT 1)
                (("23" (SKEEP)
                  (("23" (EXPAND "g_1")
                    (("23" (EXPAND "restrict" 1)
                      (("23" (DERIV)
                        (("23" (TYPEPRED "x!1")
                          (("23" (EXPAND "right_open" -1)
                            (("23" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("24" (PROPAX) NIL NIL) ("25" (PROPAX) NIL NIL)
               ("26" (PROPAX) NIL NIL) ("27" (PROPAX) NIL NIL)
               ("28" (PROPAX) NIL NIL) ("29" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|f2| CONST-DECL "[real -> real]" |active_corner_certificate| NIL)
    (|f1| CONST-DECL "[real -> real]" |active_corner_certificate| NIL)
    (|f0| CONST-DECL "[real -> real]" |active_corner_certificate| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|full_domain_soundness_lemma| FORMULA-DECL NIL |active_corner_certificate|
     NIL)
    (|left_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|derivable_pow_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|deriv_domain_not_one_element| FORMULA-DECL NIL |deriv_domain_def|
     |analysis|)
    (|left_open_dd| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|deriv_pow_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ci| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|right_open| CONST-DECL "bool" |active_corner_certificate| NIL))
   SHOSTAK))
 (|full_domain_soundness_lemma_fun2| 0
  (|full_domain_soundness_lemma_fun2-1| NIL 3966369837
   ("" (SKEEP)
    (("" (SKOLETIN 1)
      (("" (FLATTEN)
        (("" (LEMMA "full_domain_soundness_lemma")
          (("" (INST -1 "x" "xo" "yo" "g_1")
            (("" (SPLIT -1)
              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
               ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
               ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)
               ("7" (PROPAX) NIL NIL) ("8" (PROPAX) NIL NIL)
               ("9" (PROPAX) NIL NIL) ("10" (PROPAX) NIL NIL)
               ("11" (PROPAX) NIL NIL) ("12" (PROPAX) NIL NIL)
               ("13" (PROPAX) NIL NIL) ("14" (PROPAX) NIL NIL)
               ("15" (PROPAX) NIL NIL) ("16" (PROPAX) NIL NIL)
               ("17" (HIDE-ALL-BUT 1)
                (("17" (EXPAND "g_1")
                  (("17" (EXPAND "restrict")
                    (("17" (DERIVABLE)
                      (("1"
                        (CASE "(LAMBDA (s: (left_open(0))):
             COND s <= 4 -> s ^ 2, ELSE -> 8 * s - 16 ENDCOND) = (LAMBDA (s: (left_open(0))):
              s ^ 2)")
                        (("1" (REPLACE -1)
                          (("1" (HIDE -1)
                            (("1" (DERIVABLE)
                              (("1" (LEMMA "left_open_dd")
                                (("1" (INST -1 "0") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (DECOMPOSE-EQUALITY 1)
                          (("2" (HIDE 2)
                            (("2" (TYPEPRED "x!1")
                              (("2" (EXPAND "left_open" -1)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "left_open_dd")
                        (("2" (INST -1 "0") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("18" (HIDE-ALL-BUT 1)
                (("18" (EXPAND "g_1")
                  (("18" (EXPAND "restrict")
                    (("18"
                      (CASE "(LAMBDA (s: (left_open(0))):
             COND s <= 4 -> s ^ 2, ELSE -> 8 * s - 16 ENDCOND) = (LAMBDA (s: (left_open(0))):
              s ^ 2)")
                      (("1" (REPLACE -1)
                        (("1" (HIDE -1)
                          (("1" (SKEEP)
                            (("1" (DERIV)
                              (("1" (TYPEPRED "x!1")
                                (("1" (EXPAND "left_open" -1)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL)
                               ("2" (LEMMA "left_open_dd")
                                (("2" (INST -1 "0") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY 1)
                        (("2" (HIDE 2)
                          (("2" (TYPEPRED "x!1")
                            (("2" (EXPAND "left_open" -1)
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("19" (HIDE-ALL-BUT 1)
                (("19" (EXPAND "g_1")
                  (("19" (EXPAND "restrict")
                    (("19"
                      (CASE "(LAMBDA (s: (ci(0, 4))):
             COND s <= 4 -> s ^ 2, ELSE -> 8 * s - 16 ENDCOND) = (LAMBDA(s:(ci(0,4))): s^2)")
                      (("1" (REPLACE -1)
                        (("1" (HIDE -1) (("1" (DERIVABLE) NIL NIL)) NIL)) NIL)
                       ("2" (DECOMPOSE-EQUALITY 1)
                        (("2" (TYPEPRED "x!1")
                          (("2" (EXPAND "ci" -1)
                            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("20" (HIDE-ALL-BUT 1)
                (("20" (SKEEP)
                  (("20" (EXPAND "restrict" 1)
                    (("20" (EXPAND "g_1")
                      (("20"
                        (CASE "(LAMBDA (s: (ci(0, 4))):
             COND s <= 4 -> s ^ 2, ELSE -> 8 * s - 16 ENDCOND) = (LAMBDA(s:(ci(0,4))): s^2)")
                        (("1" (REPLACE -1)
                          (("1" (HIDE -1)
                            (("1" (DERIV)
                              (("1" (TYPEPRED "x!1")
                                (("1" (EXPAND "ci" -1) (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (DECOMPOSE-EQUALITY 1)
                          (("2" (TYPEPRED "x!2")
                            (("2" (EXPAND "ci" -1)
                              (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("21" (HIDE-ALL-BUT 1)
                (("21" (SKEEP)
                  (("21" (EXPAND "g_1")
                    (("21" (EXPAND "restrict")
                      (("21"
                        (CASE "(LAMBDA (s: (ci(0, 4))):
             COND s <= 4 -> s ^ 2, ELSE -> 8 * s - 16 ENDCOND) = (LAMBDA(s:(ci(0,4))): s^2)")
                        (("1" (REPLACE -1)
                          (("1" (HIDE -1)
                            (("1" (DERIV)
                              (("1" (TYPEPRED "x!1")
                                (("1" (EXPAND "ci" -1) (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (DECOMPOSE-EQUALITY 1)
                          (("2" (TYPEPRED "x!2")
                            (("2" (EXPAND "ci" -1)
                              (("2" (ASSERT)
                                (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("22" (HIDE-ALL-BUT 1)
                (("22" (EXPAND "g_1")
                  (("22" (EXPAND "restrict")
                    (("22"
                      (CASE " (LAMBDA (s: (right_open(4))):
             COND s <= 4 -> s ^ 2, ELSE -> 8 * s - 16 ENDCOND) = (LAMBDA(s: (right_open(4))):  8 * s - 16)")
                      (("1" (REPLACE -1) (("1" (DERIVABLE) NIL NIL)) NIL)
                       ("2" (DECOMPOSE-EQUALITY 1)
                        (("2" (TYPEPRED "x!1")
                          (("2" (EXPAND "right_open" -1)
                            (("2" (ASSERT)
                              (("2" (HIDE 2)
                                (("2" (CASE "x!1=4")
                                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("23" (HIDE-ALL-BUT 1)
                (("23" (EXPAND "g_1")
                  (("23" (EXPAND "restrict")
                    (("23" (SKEEP)
                      (("23"
                        (CASE " (LAMBDA (s: (right_open(4))):
             COND s <= 4 -> s ^ 2, ELSE -> 8 * s - 16 ENDCOND) = (LAMBDA(s: (right_open(4))):  8 * s - 16)")
                        (("1" (REPLACE -1) (("1" (DERIV) NIL NIL)) NIL)
                         ("2" (DECOMPOSE-EQUALITY 1)
                          (("2" (TYPEPRED "x!2")
                            (("2" (EXPAND "right_open")
                              (("2" (CASE "x!2=4")
                                (("1" (REPLACE -1)
                                  (("1" (ASSERT)
                                    (("1" (HIDE 2)
                                      (("1" (EVAL-EXPR 1)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("24" (PROPAX) NIL NIL) ("25" (PROPAX) NIL NIL)
               ("26" (PROPAX) NIL NIL) ("27" (PROPAX) NIL NIL)
               ("28" (PROPAX) NIL NIL) ("29" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|deriv_sub_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|deriv_const_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|deriv_scal1_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|deriv_id_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u16_i16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|derivable_sub_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|derivable_const_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|derivable_id_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|derivable_scal1_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|right_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (D__11 SKOLEM-CONST-DECL "[(ci(0, 4)) -> real]" |active_corner_certificate|
     NIL)
    (D__10 SKOLEM-CONST-DECL "[(ci(0, 4)) -> real]" |active_corner_certificate|
     NIL)
    (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|ci| CONST-DECL "bool" |active_corner_certificate| NIL)
    (D__9 SKOLEM-CONST-DECL "[(left_open(0)) -> real]"
     |active_corner_certificate| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|deriv_pow_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|left_open_dd| FORMULA-DECL NIL |active_corner_certificate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|derivable_pow_lam| FORMULA-DECL NIL |derivatives_lam| |analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|deriv_domain_not_one_element| FORMULA-DECL NIL |deriv_domain_def|
     |analysis|)
    (|left_open| CONST-DECL "bool" |active_corner_certificate| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|g_1| SKOLEM-CONST-DECL "[real -> real]" |active_corner_certificate| NIL)
    (|full_domain_soundness_lemma| FORMULA-DECL NIL |active_corner_certificate|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|f0| CONST-DECL "[real -> real]" |active_corner_certificate| NIL)
    (|f1| CONST-DECL "[real -> real]" |active_corner_certificate| NIL)
    (|f2| CONST-DECL "[real -> real]" |active_corner_certificate| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK)))

